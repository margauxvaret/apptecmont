import streamlit as st
import pandas as pd
import plotly.express as px

# Configuration de la page
st.set_page_config(
    page_title="Indian Food EDA",
    page_icon="üçõ",
    layout="wide"
)

# Charger les donn√©es
@st.cache_data
def load_data():
    url = 'https://raw.githubusercontent.com/v61093/Indian-Food-Analysis/main/indian_food.csv'
    return pd.read_csv(url)

# Charger les donn√©es
data = load_data()

# Barre lat√©rale pour la navigation
st.sidebar.title("Navigation")
menu = st.sidebar.radio("Menu", ["Accueil", "EDA", "Graphiques Interactifs", "Insights", "Analyse R√©gionale"])

# Titre principal
st.markdown(
    """
    <h1 style="text-align: center; color: #3a5b8a; font-family: Arial, sans-serif;">
        Explorez la Cuisine Indienne üçõ
    </h1>
    """,
    unsafe_allow_html=True
)

# Page : Accueil
if menu == "Accueil":
    st.subheader("Bienvenue !")
    st.write("Cette application vous permet d'explorer un ensemble de donn√©es sur la cuisine indienne.")
    st.write("Naviguez dans les sections pour explorer les donn√©es et d√©couvrir des insights !")

# Page : EDA (Exploration des donn√©es)
elif menu == "EDA":
    st.subheader("Exploration des donn√©es (EDA)")
    st.write("Aper√ßu des donn√©es :")
    st.write(data.head())

    # Graphique circulaire : Distribution des profils de saveurs
    st.subheader("Distribution des profils de saveurs")
    flavor_counts = data['flavor_profile'].value_counts()
    st.write(f"Profils de saveurs disponibles : {', '.join(data['flavor_profile'].dropna().unique())}")
    fig_pie_flavor = px.pie(
        names=flavor_counts.index, 
        values=flavor_counts.values,
        title="R√©partition des profils de saveurs",
        labels={'label': 'Profil de saveur'}
    )
    st.plotly_chart(fig_pie_flavor, use_container_width=True)

# Page : Graphiques Interactifs
elif menu == "Graphiques Interactifs":
    st.subheader("Graphiques interactifs")

    # Graphique en barres : Nombre de plats par r√©gion
    st.subheader("Nombre de plats par r√©gion")
    region_counts = data['region'].value_counts()
    fig_bar_region = px.bar(
        x=region_counts.index, 
        y=region_counts.values,
        labels={'x': 'R√©gion', 'y': 'Nombre de plats'},
        title="Nombre de plats par r√©gion"
    )
    st.plotly_chart(fig_bar_region, use_container_width=True)

    # Graphique en barres : Distribution des types de r√©gimes
    st.subheader("Distribution des types de r√©gimes")
    diet_counts = data['diet'].value_counts()
    fig_bar_diet = px.bar(
        x=diet_counts.index,
        y=diet_counts.values,
        labels={'x': 'Type de r√©gime', 'y': 'Nombre de plats'},
        title="Distribution des types de r√©gimes"
    )
    st.plotly_chart(fig_bar_diet, use_container_width=True)

# Page : Insights
elif menu == "Insights":
    st.subheader("Insights")

    # Graphique en ligne : √âvolution cumulative du temps de pr√©paration par index
    st.subheader("Temps de pr√©paration cumulatif")
    data_sorted = data.sort_values(by="prep_time", ascending=True)
    data_sorted['prep_time_cumsum'] = data_sorted['prep_time'].cumsum()
    st.line_chart(data_sorted['prep_time_cumsum'])

# Page : Analyse R√©gionale
elif menu == "Analyse R√©gionale":
    st.subheader("Analyse r√©gionale des plats")

    # Graphique circulaire : Nombre de plats par r√©gion
    st.subheader("R√©partition des plats par r√©gion")
    region_counts = data['region'].value_counts()
    fig_pie_region = px.pie(
        names=region_counts.index,
        values=region_counts.values,
        title="Proportion des plats par r√©gion"
    )
    st.plotly_chart(fig_pie_region, use_container_width=True)
